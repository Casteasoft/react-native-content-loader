var _jsxFileName="/home/cipto/Code/npmjs/react-native-content-loader/src/index.js";function _extends(){return _extends=Object.assign?Object.assign.bind():function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}import React,{useEffect,useRef}from"react";import{Animated,Platform,View}from"react-native";export const withViewLoader=a=>({duration:e=3e3,bottomtValue:f=.1,topValue:g=1,children:b,isLoading:h=!0,numberOfLines:j=0,style:c,loaderColorStyle:k={backgroundColor:"#111827"},...d})=>{const l=useRef(new Animated.Value(f)).current;return useEffect(()=>{const a=Animated.sequence([Animated.timing(l,{toValue:g,duration:e,useNativeDriver:"web"!==Platform.OS}),Animated.timing(l,{toValue:f,duration:e,useNativeDriver:"web"!==Platform.OS})]);Animated.loop(a).start()},[l,h]),h?/*#__PURE__*/React.createElement(Animated.View,{style:[...(Array.isArray(c)?[...c]:[c]),{backgroundColor:j?"transparent":k.backgroundColor},{// Bind opacity to animated value
opacity:h?l:1}],__source:{fileName:_jsxFileName,lineNumber:36,columnNumber:7}},j?[...Array(j)].map((a,b)=>/*#__PURE__*/React.createElement(View,{key:b,style:[k,{marginBottom:4,height:8,width:j===b+1?"83.333333%":"100%"}],__source:{fileName:_jsxFileName,lineNumber:53,columnNumber:17}})):null):/*#__PURE__*/React.createElement(a,_extends({},d,{style:c,__source:{fileName:_jsxFileName,lineNumber:69,columnNumber:7}}),b)};const RNContentLoader={withViewLoader};export default RNContentLoader;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVJlZiIsIkFuaW1hdGVkIiwiUGxhdGZvcm0iLCJWaWV3Iiwid2l0aFZpZXdMb2FkZXIiLCJUYXJnZXRDb21wb25lbnQiLCJkdXJhdGlvbiIsImJvdHRvbXRWYWx1ZSIsInRvcFZhbHVlIiwiY2hpbGRyZW4iLCJpc0xvYWRpbmciLCJudW1iZXJPZkxpbmVzIiwic3R5bGUiLCJsb2FkZXJDb2xvclN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwicHJvcHMiLCJibGlua0FuaW0iLCJWYWx1ZSIsImN1cnJlbnQiLCJibGluayIsInNlcXVlbmNlIiwidGltaW5nIiwidG9WYWx1ZSIsInVzZU5hdGl2ZURyaXZlciIsIk9TIiwibG9vcCIsInN0YXJ0IiwiQXJyYXkiLCJpc0FycmF5Iiwib3BhY2l0eSIsIm1hcCIsIl9pdGVtIiwiaSIsIm1hcmdpbkJvdHRvbSIsImhlaWdodCIsIndpZHRoIiwiUk5Db250ZW50TG9hZGVyIl0sInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQW5pbWF0ZWQsIFBsYXRmb3JtLCBWaWV3IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuXG5leHBvcnQgY29uc3Qgd2l0aFZpZXdMb2FkZXIgPVxuICAoVGFyZ2V0Q29tcG9uZW50KSA9PlxuICAoe1xuICAgIGR1cmF0aW9uID0gMzAwMCxcbiAgICBib3R0b210VmFsdWUgPSAwLjEsXG4gICAgdG9wVmFsdWUgPSAxLFxuICAgIGNoaWxkcmVuLFxuICAgIGlzTG9hZGluZyA9IHRydWUsXG4gICAgbnVtYmVyT2ZMaW5lcyA9IDAsXG4gICAgc3R5bGUsXG4gICAgbG9hZGVyQ29sb3JTdHlsZSA9IHsgYmFja2dyb3VuZENvbG9yOiBcIiMxMTE4MjdcIiB9LFxuICAgIC4uLnByb3BzXG4gIH0pID0+IHtcbiAgICBjb25zdCBibGlua0FuaW0gPSB1c2VSZWYobmV3IEFuaW1hdGVkLlZhbHVlKGJvdHRvbXRWYWx1ZSkpLmN1cnJlbnQ7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgYmxpbmsgPSBBbmltYXRlZC5zZXF1ZW5jZShbXG4gICAgICAgIEFuaW1hdGVkLnRpbWluZyhibGlua0FuaW0sIHtcbiAgICAgICAgICB0b1ZhbHVlOiB0b3BWYWx1ZSxcbiAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IFBsYXRmb3JtLk9TICE9PSBcIndlYlwiLFxuICAgICAgICB9KSxcbiAgICAgICAgQW5pbWF0ZWQudGltaW5nKGJsaW5rQW5pbSwge1xuICAgICAgICAgIHRvVmFsdWU6IGJvdHRvbXRWYWx1ZSxcbiAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IFBsYXRmb3JtLk9TICE9PSBcIndlYlwiLFxuICAgICAgICB9KSxcbiAgICAgIF0pO1xuICAgICAgQW5pbWF0ZWQubG9vcChibGluaykuc3RhcnQoKTtcbiAgICB9LCBbYmxpbmtBbmltLCBpc0xvYWRpbmddKTtcblxuICAgIHJldHVybiBpc0xvYWRpbmcgPyAoXG4gICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICBzdHlsZT17W1xuICAgICAgICAgIC4uLihBcnJheS5pc0FycmF5KHN0eWxlKSA/IFsuLi5zdHlsZV0gOiBbc3R5bGVdKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICEhbnVtYmVyT2ZMaW5lc1xuICAgICAgICAgICAgICA/IFwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgICAgICA6IGxvYWRlckNvbG9yU3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gQmluZCBvcGFjaXR5IHRvIGFuaW1hdGVkIHZhbHVlXG4gICAgICAgICAgICBvcGFjaXR5OiBpc0xvYWRpbmcgPyBibGlua0FuaW0gOiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgIF19XG4gICAgICA+XG4gICAgICAgIHshIW51bWJlck9mTGluZXNcbiAgICAgICAgICA/IFsuLi5BcnJheShudW1iZXJPZkxpbmVzKV0ubWFwKChfaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICAgICAgICBsb2FkZXJDb2xvclN0eWxlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiA0LFxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogOCxcbiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbnVtYmVyT2ZMaW5lcyA9PT0gaSArIDEgPyBcIjgzLjMzMzMzMyVcIiA6IFwiMTAwJVwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IG51bGx9XG4gICAgICA8L0FuaW1hdGVkLlZpZXc+XG4gICAgKSA6IChcbiAgICAgIDxUYXJnZXRDb21wb25lbnQgey4uLnsgLi4ucHJvcHMsIHN0eWxlIH19PntjaGlsZHJlbn08L1RhcmdldENvbXBvbmVudD5cbiAgICApO1xuICB9O1xuXG5jb25zdCBSTkNvbnRlbnRMb2FkZXIgPSB7IHdpdGhWaWV3TG9hZGVyIH07XG5cbmV4cG9ydCBkZWZhdWx0IFJOQ29udGVudExvYWRlcjtcbiJdLCJtYXBwaW5ncyI6InlVQUFBLE1BQU9BLE1BQUssRUFBSUMsU0FBUyxDQUFFQyxNQUFNLEtBQVEsT0FBTyxDQUNoRCxPQUFTQyxRQUFRLENBQUVDLFFB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